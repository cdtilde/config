#+TITLE: Org-Mode Cheat Sheet
#+OPTIONS: toc:nil 

* Org Documents

| Key       | Function                                         |
| C-c C-x \ | Show entities as UTF-8 characters (e.g., \alpha) |
| <s TAB    | Insert #+BEGIN_SRC .. #+END_SRC template (more)  |
|           |                                                  |
|           |                                                  |
|           |                                                  |


** Character Formatting

- =*bold*= *example*
- =/italic/= /example/
- =_underlined_= _example_
- =~code~= ~example~
- =+strike-through+= +example+

Here's an example of ~max(int a, int b)~ code in text.

** Paragraph Formatting

Some random text here, followed by a quote:

#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE

The regular text continues here. 

You can insert a hard paragraph break\\
 with two /\/\'s at the end of a line.

** Miscellaneous

- # and a whitespace are comments
- 5 dashes will be a horizontal rule
- [ ] A checkbox here and more details!
- [X] A checked checkbox here
- I have a footnote! [fn:1]

[fn:1] This is the text of the footnote!

** Math
- Greek characters are written like this: ~\alpha~ \alpha \beta \gamma
- Subscripts and superscripts are done with ~^~ and ~_~: x^y, \sigma_{var}

Latex equations can be written like this:

\begin{equation}
x=\sqrt{b}
\end{equation}
     
If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt{2} $$ or \[ a=-\sqrt{2} \]


* Code
  
** Keybindings
| Key   | Function |
| C-c ' | Edit current code block in separate window |
  
** Including in Text
Source code is included and referenced like this:

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp -n -r
    (save-excursion                  (ref:x)
       (goto-char (point-min)))      (ref:y)
#+END_SRC
In line [[(x)]] we remember the current position.  [[(y)][Line (y)]]
jumps to point-min.
#+END_EXAMPLE

#+NAME: mysource
#+BEGIN_SRC emacs-lisp -n -r 
    (save-excursion                  (ref:sc)
       (goto-char (point-min)))      (ref:jump)
#+END_SRC

In line [[(sc)]] we remember the current position. [[(jump)][Line (jump)]]
jumps to point-min.

Options:
 - ~-n~ :: number the lines
 - ~+n~ :: continue the numbering from the previous snippet
 - ~-r~ :: don't display the labels in the source code

** Evaluating Code

This code snippet will print the code, and then the value returned by evaluating the code at export time.
#+NAME: point-max-block
#+BEGIN_SRC emacs-lisp -n :exports both
  (point-max)
#+END_SRC

The results will be placed here:

#+RESULTS: point-max-block

** Teradata SQL

#+name: my-query
#+header: :engine teradata
#+begin_src sql :exports both :results literal
  select current_timestamp as "Current Time";
#+end_src

#+RESULTS: my-query
| Current Time                     |
|----------------------------------|
| 2014-06-02 13:35:58.610000+00:00 |



* Tables
** Keybindings

| Key           | Function                                                  |
|---------------+-----------------------------------------------------------|
| C-c '         | edit all formulas                                         |
| C-c -         | insert a hline                                            |
| C-c =         | edit column formula                                       |
| C-c ?         | get info about current cell                               |
| C-c \vert     | convert region to table                                   |
| C-c ^         | sort the lines in the region                              |
| C-c C-c       | realign table                                             |
| C-u C-c =     | edit field formula                                        |
| C-u C-u C-c * | recalc table                                              |
| M-left/right  | move column left or right                                 |
| M-s-down      | move current row down and add a row above                 |
| M-s-left      | delete current column                                     |
| M-s-right     | move current column right and insert a column to the left |
| M-up/down     | move row up or down                                       |

** Miscellaneous
- M-x :: org-table-export
- Types of formulas:
  * := :: field formula 
  * = :: column formula


     
** Example Table

Code:

#+BEGIN_EXAMPLE
#+CONSTANTS: pi=3.14
#+CAPTION: Very important table with numbers in it
#+TBLNAME: summary-cost 
| Item           |   | Annual Cost | Monthly Cost |            |
|                |   |         <r> |          <r> |      <r10> |
|----------------+---+-------------+--------------+------------|
| /              | < |             |            > |            |
| Startup Cost   | 1 |         $10 |          $12 |     $1,232 |
| Something else | 2 |    $232,323 |          $24 |    $45,555 |
| Something      | 2 |      $3,231 |          $24 |         $0 |
| Final thing    | 3 |      $3,422 |          $36 |         $0 |
|----------------+---+-------------+--------------+------------|
| Totals         | 8 |    $238,986 |          $96 |         $0 |
#+TBLFM: $4=$2*12;C%d::@8$3=vsum(@I..II);C%d::$5=$5;C%d
#+END_EXAMPLE

Output:


#+CONSTANTS: pi=3.14
#+CAPTION: Very important table with numbers in it
#+TBLNAME: summary-cost 
#+ATTR_LATEX: :placement sidewaystable
| Item           |   | Annual Cost | Monthly Cost |            |
|                |   |         <r> |          <r> |      <r10> |
|----------------+---+-------------+--------------+------------|
| /              | < |             |            > |            |
| Startup Cost   | 1 |         $10 |          $12 |     $1,232 |
| Something else | 2 |    $232,323 |          $24 |    $45,555 |
| Something      | 2 |      $3,231 |          $24 |         $0 |
| Final thing    | 3 |      $3,422 |          $36 |         $0 |
|----------------+---+-------------+--------------+------------|
| Totals         | 8 |    $238,986 |          $96 |         $0 |
#+TBLFM: $4=$2*12;C%d::$5=$5;C%d::@8$3=vsum(@I..II);C%d


Notes:
- <r10> forces right-align and makes the column 10 characters
- / in first column generates vertical column group separators
- Referring to a value in the table, the total in column 3 is src_emacs-lisp[:var d=summary-cost[9,2]]{d}. Code: ~src_emacs-lisp[:var d=summary-cost[9,2]]{d}~ 
- Constants can be referred to as ~$pi~
- C is a custom format specifier. It says that the input may have $ and , in it, and to strip those out, perform the calculation, then add $ and , back in before displaying the results.


* Tables of Content

#+TOC: headings 1

#+TOC: listings


#+TOC: tables

